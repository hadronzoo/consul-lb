daemon off;

events {}

http {
  server_tokens off;

  map $http_upgrade $connection_upgrade {
    '' close;
    default upgrade;
  }

  proxy_set_header Connection $connection_upgrade;
  proxy_set_header Host $host;
  proxy_set_header Upgrade $http_upgrade;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Real-IP $remote_addr;

  gzip on;
  gzip_vary on;
  gzip_proxied any;
  gzip_disable "MSIE [1-6]\.";
  gzip_types
    text/plain
    text/css
    application/json
    text/xml
    application/xml
    application/xml+rss
    application/javascript;

{{- if eq (env "USE_SSL") "1" }}
  ssl_certificate /code/private/fullchain.pem;
  ssl_certificate_key /code/private/privkey.pem;
{{- end -}}

  server {
    listen 80 default_server;

    location /healthz {
      return 200;
    }

    location /.well-known/acme-challenge/ {
      if ($request_method != GET) {
        return 403;
      }

      rewrite (.*) /v1/kv/{{print (env "CONSUL_SERVICE_NAME") "/" (env "LETSENCRYPT_TEST_CERT")}}$1?raw break;
      proxy_pass {{env "CONSUL_URL"}};
    }

    location / {
      return 302 https://$host$request_uri;
    }
  }

{{- $prefix := env "CONSUL_TAG_PREFIX" -}}
{{- $prefixAuthRegex := print "^" $prefix "\\.auth=" -}}
{{- $prefixAuthSplit := print $prefix ".auth=" -}}
{{- $prefixUrlRegex := print "^" $prefix "\\.url=" -}}
{{- $prefixUrlSplit := print $prefix ".url=" -}}
{{- range services -}}
  {{- range $service := service (print .Name "|any") -}}
    {{- range .Tags -}}
      {{ if regexMatch $prefixUrlRegex . -}}
        {{- if $url := index (split $prefixUrlSplit .) 1 -}}
          {{- $domain := regexReplaceAll "/.*$" "" $url -}}
          {{- $path := regexReplaceAll (print "^" $domain "/?") "/" $url -}}
          {{- $upstream := regexReplaceAll "[^0-9A-Za-z_]" "_" (print $domain $path) -}}
          {{- $server := (print $service.Address ":" $service.Port) -}}
          {{- scratch.MapSet "domains" $domain $domain -}}
          {{- scratch.MapSet (print "pathsByDomain:" $domain) $path $path -}}
          {{- scratch.MapSet (print "upstreamsByDomain:" $domain) $path $upstream -}}
          {{- if eq $service.Status "passing" -}}
            {{- scratch.MapSet (print "serversByUpstream:" $upstream) $server $server}}
          {{- end -}}
          {{- range $service.Tags -}}
            {{ if regexMatch $prefixAuthRegex . -}}
              {{- if $auth := index (split $prefixAuthSplit .) 1 -}}
                {{- $auth := regexReplaceAll "[^0-9A-Za-z_]" "_" $auth -}}
                {{- scratch.MapSet (print "authsByDomain:" $domain) $path $auth -}}
              {{- end -}}
            {{- end -}}
          {{- end -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
{{- end -}}
{{- range $domain := scratch.MapValues "domains" -}}
  {{- range scratch.MapValues (print "upstreamsByDomain:" .)}}

  upstream {{.}} {
    least_conn;
    {{- range scratch.MapValues (print "serversByUpstream:" .)}}
    server {{.}} max_fails=3 fail_timeout=60 weight=1;
    {{- else}}
    server localhost:65535;
    {{- end}}
  }
  {{- end}}

  server {
    listen {{if eq (env "USE_SSL") "1"}}443 ssl http2{{else}}80{{end}};
    server_name {{$domain}};

  {{- if eq (env "USE_SSL") "1" }}
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve secp384r1;
    ssl_session_timeout 10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Robots-Tag none;
  {{- end -}}

  {{- $authsByDomain := scratch.Get (print "authsByDomain:" .) -}}
  {{- range scratch.MapValues (print "pathsByDomain:" $domain)}}

    location {{.}} {
    {{- if $authsByDomain -}}
      {{- if $auth := index $authsByDomain .}}
      auth_basic Restricted;
      auth_basic_user_file /code/private/{{$auth}}.auth;
      {{- end}}
    {{- end}}
      proxy_pass http://{{index (scratch.Get (print "upstreamsByDomain:" $domain)) .}};
    }
  {{- end}}
  }
{{- end}}
}
